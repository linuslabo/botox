{"version":3,"sources":["datatypes/structures.js"],"names":[],"mappings":";;;;eAA2B,OAAO,CAAC,UAAU,CAAC;;IAAxC,QAAQ,YAAR,QAAQ;IAAE,MAAM,YAAN,MAAM;;AAEtB,MAAM,CAAC,OAAO,GAAG;AACf,SAAO,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC;AAC7C,SAAO,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC;AAC7C,aAAW,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,eAAe,CAAC;CAC9D,CAAC;;AAGF,SAAS,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE;AAChC,MAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,EACvC,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC9C,SAAO,KAAK,CAAC,SAAS,CAAC,CAAC;CACzB;;AAED,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,IAAoC,EAAE,QAAQ,EAAE;;;MAA/C,IAAI,GAAL,IAAoC,CAAnC,IAAI;MAAC,KAAK,GAAX,IAAoC,CAA9B,KAAK;MAAC,SAAS,GAArB,IAAoC,CAAxB,SAAS;MAAC,aAAa,GAAnC,IAAoC,CAAd,aAAa;;AACpE,MAAI,OAAO,GAAG;AACZ,SAAK,EAAE,EAAE;AACT,QAAI,EAAE,CAAC;GACR,CAAC;AACF,MAAI,CAAC,CAAC;AACN,MAAG,OAAO,KAAK,KAAK,QAAQ,EAC1B,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,KAC5B,IAAI,OAAO,KAAK,KAAK,WAAW,EACnC,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,KAC3B,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;kBACxB,MAAM,CAAC;aAAM,MAAK,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,EAAE,QAAQ,CAAC;KAAA,EAAC,QAAQ,CAAC;;QAApH,IAAI,WAAJ,IAAI;QAAC,KAAK,WAAL,KAAK;;AACf,WAAO,CAAC,IAAI,IAAI,IAAI,CAAC;AACrB,UAAM,IAAI,IAAI,CAAC;AACf,KAAC,GAAG,KAAK,CAAC;GACX;AACC,KAAC,GAAG,CAAC,CAAC;AACR,OAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;mBACX,MAAM,CAAC;aAAM,MAAK,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC;KAAA,EAAE,CAAC,CAAC;;AAAtE,QAAI,YAAJ,IAAI;AAAC,SAAK,YAAL,KAAK;;AACZ,WAAO,CAAC,IAAI,IAAI,IAAI,CAAC;AACrB,UAAM,IAAI,IAAI,CAAC;AACf,WAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC3B;AACD,SAAO,OAAO,CAAC;CAChB;;AAED,SAAS,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAoC,EAAE,QAAQ,EAAE;;;MAA/C,IAAI,GAAL,KAAoC,CAAnC,IAAI;MAAC,KAAK,GAAX,KAAoC,CAA9B,KAAK;MAAC,SAAS,GAArB,KAAoC,CAAxB,SAAS;MAAC,aAAa,GAAnC,KAAoC,CAAd,aAAa;;AAC5E,MAAI,OAAO,KAAK,KAAK,WAAW,IAAI,OAAO,SAAS,KAAK,WAAW,EAClE,MAAM,GAAE,MAAM,CAAC;WAAM,OAAK,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,EAAE,QAAQ,CAAC;GAAA,EAAC,QAAQ,CAAC,CAAC,KAC7H,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;GACtC;AACD,SAAO,KAAK,CAAC,MAAM,CAAC,UAAC,MAAM,EAAC,CAAC,EAAC,KAAK;WAAI,MAAM,CAAC;aAAM,OAAK,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC;KAAA,EAAC,KAAK,CAAC;GAAA,EAAC,MAAM,CAAC,CAAC;CAClH;;AAED,SAAS,WAAW,CAAC,KAAK,EAAE,KAAoC,EAAE,QAAQ,EAAE;;;MAA/C,IAAI,GAAL,KAAoC,CAAnC,IAAI;MAAC,KAAK,GAAX,KAAoC,CAA9B,KAAK;MAAC,SAAS,GAArB,KAAoC,CAAxB,SAAS;MAAC,aAAa,GAAnC,KAAoC,CAAd,aAAa;;AAC7D,MAAI,IAAI,GAAG,CAAC,CAAC;AACb,MAAI,OAAO,KAAK,KAAK,WAAW,IAAK,OAAO,SAAS,KAAK,WAAW,EACnE,IAAI,GAAC,MAAM,CAAC;WAAM,OAAK,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,EAAE,QAAQ,CAAC;GAAA,EAAC,QAAQ,CAAC,CAAC;;AAEhH,SAAO,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAC,CAAC,EAAC,KAAK;WAAI,MAAM,CAAC;aAAM,IAAI,GAAC,OAAK,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC;KAAA,EAAE,KAAK,CAAC;GAAA,EAAC,IAAI,CAAC,CAAC;CACrG;;AAGD,SAAS,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE;;;AACxD,MAAI,OAAO,GAAG;AACZ,SAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;AACxB,QAAI,EAAE,CAAC;GACR,CAAC;AACF,UAAQ,CAAC,OAAO,CAAC,UAAC,KAAgB,EAAK;QAApB,IAAI,GAAL,KAAgB,CAAf,IAAI;QAAC,IAAI,GAAV,KAAgB,CAAV,IAAI;QAAC,IAAI,GAAf,KAAgB,CAAL,IAAI;;AAC/B,UAAM,CAAC,YAAM;AACX,UAAI,WAAW,GAAG,OAAK,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AACjE,aAAO,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC;AACjC,YAAM,IAAI,WAAW,CAAC,IAAI,CAAC;AAC3B,UAAI,IAAI,EAAE;AACR,YAAG,WAAW,CAAC,KAAK,KAAK,SAAS,EAAE,aAAY,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAS,GAAG,EAAE;AACvF,iBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC7C,CAAC,CAAC;OACJ,MACC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC;KAC3C,EAAE,IAAI,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC;GAC7B,CAAC,CAAC;AACH,SAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3B,SAAO,OAAO,CAAC;CAChB;;AAED,SAAS,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE;;;AAChE,OAAK,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AACtB,QAAM,GAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,MAAM,EAAC,KAAgB;QAAf,IAAI,GAAL,KAAgB,CAAf,IAAI;QAAC,IAAI,GAAV,KAAgB,CAAV,IAAI;QAAC,IAAI,GAAf,KAAgB,CAAL,IAAI;WAC5C,MAAM,CAAC;aAAM,OAAK,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;KAAA,EAAC,IAAI,GAAI,IAAI,GAAG,SAAS,CAAC;GAAA,EAAC,MAAM,CAAC,CAAC;AACrH,SAAO,KAAK,CAAC,IAAI,CAAC,CAAC;AACnB,SAAO,MAAM,CAAC;CACf;;AAED,SAAS,eAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE;;;AACjD,OAAK,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AACtB,MAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAC,IAAI,EAAC,KAAgB;QAAf,IAAI,GAAL,KAAgB,CAAf,IAAI;QAAC,IAAI,GAAV,KAAgB,CAAV,IAAI;QAAC,IAAI,GAAf,KAAgB,CAAL,IAAI;WAC9C,IAAI,GAAG,MAAM,CAAC;aAAM,OAAK,MAAM,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;KAAA,EAAE,IAAI,GAAG,IAAI,GAAG,SAAS,CAAC;GAAA,EAAC,CAAC,CAAC,CAAC;AACxG,SAAO,KAAK,CAAC,IAAI,CAAC,CAAC;AACnB,SAAO,IAAI,CAAC;CACb;;AAED,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,KAAM,EAAE,QAAQ,EAAE;MAAjB,IAAI,GAAL,KAAM,CAAL,IAAI;;AACtC,SAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;CAClD;;AAED,SAAS,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAe,EAAE,QAAQ,EAAE;MAA1B,QAAQ,GAAT,KAAe,CAAd,QAAQ;MAAC,IAAI,GAAd,KAAe,CAAL,IAAI;;;;AAGvD,SAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;CACxF;;AAED,SAAS,WAAW,CAAC,KAAK,EAAE,KAAe,EAAE,QAAQ,EAAE;MAA1B,QAAQ,GAAT,KAAe,CAAd,QAAQ;MAAC,IAAI,GAAd,KAAe,CAAL,IAAI;;;AAExC,SAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;CACzE","file":"datatypes/structures.js","sourcesContent":["var { getField, tryDoc } = require(\"../utils\");\n\nmodule.exports = {\n  'array': [readArray, writeArray, sizeOfArray],\n  'count': [readCount, writeCount, sizeOfCount],\n  'container': [readContainer, writeContainer, sizeOfContainer]\n};\n\n\nfunction evalCount(count, fields) {\n  if(fields[count[\"field\"]] in count[\"map\"])\n    return count[\"map\"][fields[count[\"field\"]]];\n  return count[\"default\"];\n}\n\nfunction readArray(buffer, offset, {type,count,countType,countTypeArgs}, rootNode) {\n  var results = {\n    value: [],\n    size: 0\n  };\n  var c;\n  if(typeof count === \"object\")\n    c = evalCount(count, rootNode);\n  else if (typeof count !== \"undefined\")\n    c = getField(count, rootNode);\n  else if (typeof countType !== \"undefined\") {\n    var {size,value}=tryDoc(() => this.read(buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode),\"$count\");\n    results.size += size;\n    offset += size;\n    c = value;\n  } else // TODO : broken schema, should probably error out.\n    c = 0;\n  for(var i = 0; i < c; i++) {\n    ({size,value}=tryDoc(() => this.read(buffer, offset, type, rootNode), i));\n    results.size += size;\n    offset += size;\n    results.value.push(value);\n  }\n  return results;\n}\n\nfunction writeArray(value, buffer, offset, {type,count,countType,countTypeArgs}, rootNode) {\n  if (typeof count === \"undefined\" && typeof countType !== \"undefined\")\n    offset= tryDoc(() => this.write(value.length, buffer, offset, { type: countType, typeArgs: countTypeArgs }, rootNode),\"$count\");\n  else if (typeof count === \"undefined\") { // Broken schema, should probably error out\n  }\n  return value.reduce((offset,v,index) =>tryDoc(() => this.write(v, buffer, offset, type, rootNode),index),offset);\n}\n\nfunction sizeOfArray(value, {type,count,countType,countTypeArgs}, rootNode) {\n  var size = 0;\n  if (typeof count === \"undefined\" &&  typeof countType !== \"undefined\")\n    size=tryDoc(() => this.sizeOf(value.length, { type: countType, typeArgs: countTypeArgs }, rootNode),\"$count\");\n\n  return value.reduce((size,v,index) =>tryDoc(() => size+this.sizeOf(v, type, rootNode), index),size);\n}\n\n\nfunction readContainer(buffer, offset, typeArgs, context) {\n  var results = {\n    value: { \"..\": context },\n    size: 0\n  };\n  typeArgs.forEach(({type,name,anon}) => {\n    tryDoc(() => {\n      var readResults = this.read(buffer, offset, type, results.value);\n      results.size += readResults.size;\n      offset += readResults.size;\n      if (anon) {\n        if(readResults.value !== undefined) Object.keys(readResults.value).forEach(function(key) {\n          results.value[key] = readResults.value[key];\n        });\n      } else\n        results.value[name] = readResults.value;\n    }, name ? name : \"unknown\");\n  });\n  delete results.value[\"..\"];\n  return results;\n}\n\nfunction writeContainer(value, buffer, offset, typeArgs, context) {\n  value[\"..\"] = context;\n  offset=typeArgs.reduce((offset,{type,name,anon}) =>\n    tryDoc(() => this.write(anon ? value : value[name], buffer, offset, type, value),name ?  name : \"unknown\"),offset);\n  delete value[\"..\"];\n  return offset;\n}\n\nfunction sizeOfContainer(value, typeArgs, context) {\n  value[\"..\"] = context;\n  var size = typeArgs.reduce((size,{type,name,anon}) =>\n    size + tryDoc(() => this.sizeOf(anon ? value : value[name], type, value), name ? name : \"unknown\"),0);\n  delete value[\"..\"];\n  return size;\n}\n\nfunction readCount(buffer, offset, {type}, rootNode) {\n  return this.read(buffer, offset, type, rootNode);\n}\n\nfunction writeCount(value, buffer, offset, {countFor,type}, rootNode) {\n  // Actually gets the required field, and writes its length. Value is unused.\n  // TODO : a bit hackityhack.\n  return this.write(getField(countFor, rootNode).length, buffer, offset, type, rootNode);\n}\n\nfunction sizeOfCount(value, {countFor,type}, rootNode) {\n  // TODO : should I use value or getField().length ?\n  return this.sizeOf(getField(countFor, rootNode).length, type, rootNode);\n}\n"],"sourceRoot":"/source/"}