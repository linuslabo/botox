{"version":3,"sources":["utils.js"],"names":[],"mappings":";;AAAA,MAAM,CAAC,OAAO,GAAG;AACf,UAAQ,EAAE,QAAQ;AAClB,cAAY,EAAE,YAAY;AAC1B,eAAa,EAAE,aAAa;AAC5B,UAAQ,EAAE,QAAQ;AAClB,QAAM,EAAE,MAAM;CACf,CAAC;;AAEF,SAAS,QAAQ,CAAC,UAAU,EAAE,OAAO,EAAE;AACrC,MAAI,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC1C,MAAI,CAAC,GAAG,CAAC,CAAC;AACV,MAAI,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;AAC3B,WAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EACjC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1B,KAAC,EAAE,CAAC;GACL;AACD,SAAM,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EACjC,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,SAAO,OAAO,CAAC;CAChB;;AAED,SAAS,YAAY,CAAC,SAAS,EAAE;AAC/B,MAAI,OAAO,SAAS,KAAK,QAAQ,EAC/B,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,KACxB,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAC/B,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,KACnD,IAAI,OAAO,SAAS,CAAC,IAAI,KAAK,QAAQ,EACzC,OAAO,SAAS,CAAC,KAEjB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;CACtC;;AAED,SAAS,aAAa,CAAC,CAAC,EAAE,KAAK,EAAE;AAC/B,GAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;AAClD,QAAM,CAAC,CAAC;CACT;;AAED,SAAS,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE;AAChC,MAAI;AAAE,WAAO,KAAK,EAAE,CAAC;GAAE,CAAC,OAAO,CAAC,EAAE;AAAE,WAAO,CAAC,CAAC,CAAC,CAAC;GAAE;CAClD;;AAED,SAAS,MAAM,CAAC,KAAK,EAAC,KAAK,EAAE;AAC3B,SAAO,QAAQ,CAAC,KAAK,EAAC,UAAC,CAAC;WAAK,aAAa,CAAC,CAAC,EAAC,KAAK,CAAC;GAAA,CAAC,CAAC;CACtD","file":"utils.js","sourcesContent":["module.exports = {\n  getField: getField,\n  getFieldInfo: getFieldInfo,\n  addErrorField: addErrorField,\n  tryCatch: tryCatch,\n  tryDoc: tryDoc\n};\n\nfunction getField(countField, context) {\n  var countFieldArr = countField.split(\"/\");\n  var i = 0;\n  if (countFieldArr[i] === \"\") {\n    while (context.hasOwnProperty(\"..\"))\n      context = context[\"..\"];\n    i++;\n  }\n  for(; i < countFieldArr.length; i++)\n    context = context[countFieldArr[i]];\n  return context;\n}\n\nfunction getFieldInfo(fieldInfo) {\n  if (typeof fieldInfo === \"string\")\n    return { type: fieldInfo };\n  else if (Array.isArray(fieldInfo))\n    return { type: fieldInfo[0], typeArgs: fieldInfo[1] };\n  else if (typeof fieldInfo.type === \"string\")\n    return fieldInfo;\n  else\n    throw new Error(\"Not a fieldinfo\");\n}\n\nfunction addErrorField(e, field) {\n  e.field = e.field ? field + \".\" + e.field : field;\n  throw e;\n}\n\nfunction tryCatch(tryfn, catchfn) {\n  try { return tryfn(); } catch (e) { catchfn(e); }\n}\n\nfunction tryDoc(tryfn,field) {\n  return tryCatch(tryfn,(e) => addErrorField(e,field));\n}\n"],"sourceRoot":"/source/"}